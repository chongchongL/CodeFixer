2024-03-01 22:59:49,161 - NEXT_PERMUTATION - INFO - 开始验证补丁1 4:
2024-03-01 22:59:49,161 - NEXT_PERMUTATION - INFO - 
if (perm.get(j) > perm.get(i)) {
    ArrayList<Integer> next_perm = new ArrayList<>(perm);
    int temp_j = next_perm.get(j);
    int temp_i = next_perm.get(i);
    next_perm.set(i, temp_j);
    next_perm.set(j, temp_i);
    Collections.reverse(next_perm.subList(i + 1, next_perm.size()));
    return next_perm;
}

2024-03-01 22:59:49,965 - NEXT_PERMUTATION - INFO - 补丁1 4测试失败
2024-03-01 22:59:49,966 - NEXT_PERMUTATION - INFO - 开始验证补丁1 5:
2024-03-01 22:59:49,966 - NEXT_PERMUTATION - INFO - 
if (perm.get(j) > perm.get(i)) {
    ArrayList<Integer> next_perm = new ArrayList<>(perm);
    int temp_j = next_perm.get(j);
    int temp_i = next_perm.get(i);
    next_perm.set(i, temp_j);
    next_perm.set(j, temp_i);
    List<Integer> sublist = next_perm.subList(i+1, next_perm.size());
    Collections.reverse(sublist);
    return next_perm;
}

2024-03-01 22:59:50,724 - NEXT_PERMUTATION - INFO - 补丁1 5测试失败
2024-03-01 22:59:50,726 - NEXT_PERMUTATION - INFO - 开始验证补丁1 6:
2024-03-01 22:59:50,726 - NEXT_PERMUTATION - INFO - 
if (perm.get(j) > perm.get(i)) {
    ArrayList<Integer> next_perm = new ArrayList<>(perm);
    int temp_j = next_perm.get(j);
    int temp_i = next_perm.get(i);
    next_perm.set(i, temp_j);
    next_perm.set(j, temp_i);
    for (int k = i + 1; k < next_perm.size(); k++) {
        Collections.swap(next_perm, k, next_perm.size() - 1 - (k - (i + 1)));
    }
    return next_perm;
}

2024-03-01 22:59:51,484 - NEXT_PERMUTATION - INFO - 补丁1 6测试失败
2024-03-01 22:59:51,485 - NEXT_PERMUTATION - INFO - 开始验证补丁1 7:
2024-03-01 22:59:51,485 - NEXT_PERMUTATION - INFO - 
if (perm.get(j) > perm.get(i)) {

2024-03-01 22:59:52,519 - NEXT_PERMUTATION - INFO - 补丁1 7 通过了所有的测试用例
