2024-03-01 17:16:14,688 - QUICKSORT - INFO - 开始验证补丁1 1:
2024-03-01 17:16:14,688 - QUICKSORT - INFO - 
public class QUICKSORT {
    public static ArrayList<Integer> quicksort(ArrayList<Integer> arr) {
        if (arr.isEmpty()) {
            return new ArrayList<Integer>();
        }
        Integer pivot = arr.get(0);
        ArrayList<Integer> lesser = new ArrayList<Integer>();
        ArrayList<Integer> greater = new ArrayList<Integer>();
        for (Integer x : arr.subList(1, arr.size())) {
            if (x < pivot) {
                lesser.add(x);
            } else {
                greater.add(x);
            }
        }
        ArrayList<Integer> merged = new ArrayList<Integer>(quicksort(lesser));
        merged.add(pivot);
        merged.addAll(quicksort(greater));
        return merged;
    }
}

2024-03-01 17:16:15,530 - QUICKSORT - INFO - 补丁1 1测试失败
2024-03-01 17:16:15,531 - QUICKSORT - INFO - 开始验证补丁1 2:
2024-03-01 17:16:15,531 - QUICKSORT - INFO - 
public class QUICKSORT {
    public static ArrayList<Integer> quicksort(ArrayList<Integer> arr) {
        if (arr.isEmpty()) {
            return new ArrayList<Integer>();
        }
        Integer pivot = arr.get(0);
        ArrayList<Integer> lesser = new ArrayList<Integer>();
        ArrayList<Integer> equal = new ArrayList<Integer>();
        ArrayList<Integer> greater = new ArrayList<Integer>();
        for (Integer x : arr) {
            if (x.compareTo(pivot) < 0) {
                lesser.add(x);
            } else if (x.compareTo(pivot) > 0) {
                greater.add(x);
            } else {
                equal.add(x);
            }
        }
        ArrayList<Integer> lessSorted = quicksort(lesser);
        ArrayList<Integer> moreSorted = quicksort(greater);
        lessSorted.addAll(equal);
        lessSorted.addAll(moreSorted);
        return lessSorted;
    }
}

2024-03-01 17:16:16,377 - QUICKSORT - INFO - 补丁1 2测试失败
2024-03-01 17:16:16,378 - QUICKSORT - INFO - 开始验证补丁1 3:
2024-03-01 17:16:16,378 - QUICKSORT - INFO - 
public class QUICKSORT {
    public static ArrayList<Integer> quicksort(ArrayList<Integer> arr) {
        if (arr == null || arr.size() <= 1) {
            return arr;
        }
        int pivotIndex = arr.size() / 2;
        Integer pivot = arr.get(pivotIndex);
        ArrayList<Integer> lesser = new ArrayList<Integer>();
        ArrayList<Integer> greater = new ArrayList<Integer>();
        for (int i = 0; i < arr.size(); i++) {
            if (i == pivotIndex) continue;
            Integer value = arr.get(i);
            if (value < pivot) {
                lesser.add(value);
            } else {
                greater.add(value);
            }
        }
        ArrayList<Integer> sorted = quicksort(lesser);
        sorted.add(pivot);
        sorted.addAll(quicksort(greater));
        return sorted;
    }
}

2024-03-01 17:16:17,208 - QUICKSORT - INFO - 补丁1 3测试失败
2024-03-01 17:16:17,209 - QUICKSORT - INFO - 开始验证补丁1 4:
2024-03-01 17:16:17,209 - QUICKSORT - INFO - 
public class QUICKSORT {

    public static ArrayList<Integer> quicksort(ArrayList<Integer> arr) {
        if (arr.isEmpty()) {
            return new ArrayList<Integer>();
        }
        Integer pivot = arr.get(0);
        ArrayList<Integer> lesser = new ArrayList<Integer>();
        ArrayList<Integer> greater = new ArrayList<Integer>();
        for (Integer x : arr.subList(1, arr.size())) {
            if (x < pivot) {
                lesser.add(x);
            } else {
                greater.add(x);
            }
        }
        lesser = quicksort(lesser);
        greater = quicksort(greater);
        ArrayList<Integer> merged = new ArrayList<Integer>(lesser);
        merged.add(pivot);
        merged.addAll(greater);
        return merged;
    }
}

2024-03-01 17:16:18,013 - QUICKSORT - INFO - 补丁1 4测试失败
2024-03-01 17:16:18,015 - QUICKSORT - INFO - 开始验证补丁1 5:
2024-03-01 17:16:18,015 - QUICKSORT - INFO - 
public class QUICKSORT {

    public static ArrayList<Integer> quicksort(ArrayList<Integer> arr) {
        if (arr.isEmpty()) {
            return new ArrayList<Integer>();
        }
        // Choose a good pivot instead of just using arr.get(0), such as median or random
        Integer pivot = selectPivot(arr);
        ArrayList<Integer> lesser = new ArrayList<Integer>();
        ArrayList<Integer> greater = new ArrayList<Integer>();
        for (Integer x : arr) {
            if (x.equals(pivot)) continue; // Skip the pivot
            if (x < pivot) {
                lesser.add(x);
            } else {
                greater.add(x);
            }
        }
        lesser = quicksort(lesser);
        greater = quicksort(greater);
        ArrayList<Integer> merged = new ArrayList<Integer>(lesser);
        merged.add(pivot);
        merged.addAll(greater);
        return merged;
    }

    private static Integer selectPivot(ArrayList<Integer> arr) {
        // Implementation of pivot selection logic, e.g., median or random element
    }
}

2024-03-01 17:16:18,854 - QUICKSORT - INFO - 补丁1 5测试失败
2024-03-01 17:16:18,855 - QUICKSORT - INFO - 开始验证补丁1 6:
2024-03-01 17:16:18,855 - QUICKSORT - INFO - 
public class QUICKSORT {

    public static ArrayList<Integer> quicksort(ArrayList<Integer> arr) {
        if (arr.isEmpty()) {
            return new ArrayList<Integer>();
        }
        Integer pivot = arr.get(0);
        ArrayList<Integer> lesser = new ArrayList<Integer>();
        ArrayList<Integer> greater = new ArrayList<Integer>();
        // Notice the sublist starting from index 1 to skip the pivot
        for (Integer x : arr.subList(1, arr.size())) {
            if (x < pivot) {
                lesser.add(x);
            } else {
                greater.add(x);
            }
        }
        lesser = quicksort(lesser);
        greater = quicksort(greater);
        ArrayList<Integer> merged = new ArrayList<Integer>(lesser);
        // Add pivot between lesser and greater lists
        merged.add(pivot);
        merged.addAll(greater);
        return merged;
    }
}

2024-03-01 17:16:19,669 - QUICKSORT - INFO - 补丁1 6测试失败
2024-03-01 17:16:19,670 - QUICKSORT - INFO - 开始验证补丁1 7:
2024-03-01 17:16:19,671 - QUICKSORT - INFO - 
public class QUICKSORT {
    public static ArrayList<Integer> quicksort(ArrayList<Integer> arr) {
        if (arr.isEmpty()) {
            return new ArrayList<Integer>();
        }
        Integer pivot = arr.get(0);
        ArrayList<Integer> lesser = new ArrayList<Integer>();
        ArrayList<Integer> greater = new ArrayList<Integer>();
        for (Integer x : arr.subList(1, arr.size())) {
            if (x.compareTo(pivot) < 0) {
                lesser.add(x);
            } else {
                greater.add(x);
            }
        }
        ArrayList<Integer> sorted = quicksort(lesser);
        sorted.add(pivot);
        sorted.addAll(quicksort(greater));
        return sorted;
    }
}

2024-03-01 17:16:20,491 - QUICKSORT - INFO - 补丁1 7测试失败
2024-03-01 17:16:20,492 - QUICKSORT - INFO - 开始验证补丁1 8:
2024-03-01 17:16:20,492 - QUICKSORT - INFO - 
public class QUICKSORT {
    public static ArrayList<Integer> quicksort(ArrayList<Integer> arr) {
        if (arr.isEmpty()) {
            return new ArrayList<Integer>();
        }
        Integer pivot = arr.get(0);
        ArrayList<Integer> lesser = new ArrayList<Integer>();
        ArrayList<Integer> greater = new ArrayList<Integer>();
        for (int i = 1; i < arr.size(); i++) {
            Integer x = arr.get(i);
            if (x < pivot) {
                lesser.add(x);
            } else {
                greater.add(x);
            }
        }
        ArrayList<Integer> sorted = quicksort(lesser);
        sorted.add(pivot);
        sorted.addAll(quicksort(greater));
        return sorted;
    }
}

2024-03-01 17:16:21,338 - QUICKSORT - INFO - 补丁1 8测试失败
2024-03-01 17:16:21,340 - QUICKSORT - INFO - 开始验证补丁1 9:
2024-03-01 17:16:21,340 - QUICKSORT - INFO - 
public class QUICKSORT {
    public static ArrayList<Integer> quicksort(ArrayList<Integer> arr) {
        if (arr.size() <= 1) {
            return arr;
        }
        Integer pivot = arr.remove(0);
        ArrayList<Integer> lesser = new ArrayList<Integer>();
        ArrayList<Integer> greater = new ArrayList<Integer>();
        for (Integer x : arr) {
            if (x.compareTo(pivot) < 0) {
                lesser.add(x);
            } else {
                greater.add(x);
            }
        }
        ArrayList<Integer> result = quicksort(lesser);
        result.add(pivot);
        result.addAll(quicksort(greater));
        return result;
    }
}

2024-03-01 17:16:22,193 - QUICKSORT - INFO - 补丁1 9测试失败
2024-03-01 17:16:22,194 - QUICKSORT - INFO - 开始验证补丁2 1:
2024-03-01 17:16:22,194 - QUICKSORT - INFO - 
public class QUICKSORT {

    public static ArrayList<Integer> quicksort(ArrayList<Integer> arr) {
        if (arr.isEmpty()) {
            return new ArrayList<Integer>();
        }
        Integer pivot = arr.get(0);
        ArrayList<Integer> lesser = new ArrayList<Integer>();
        ArrayList<Integer> greater = new ArrayList<Integer>();
        for (Integer x : arr.subList(1, arr.size())) {
            if (x < pivot) {
                lesser.add(x);
            } else {
                greater.add(x);
            }
        }
        ArrayList<Integer> merged = new ArrayList<Integer>();
        merged.addAll(quicksort(lesser));
        merged.add(pivot);
        merged.addAll(quicksort(greater));
        return merged;
    }
}

2024-03-01 17:16:23,013 - QUICKSORT - INFO - 补丁2 1测试失败
2024-03-01 17:16:23,014 - QUICKSORT - INFO - 开始验证补丁2 2:
2024-03-01 17:16:23,014 - QUICKSORT - INFO - 
public class QUICKSORT {

    public static List<Integer> quicksort(List<Integer> arr) {
        if (arr.isEmpty()) {
            return new ArrayList<Integer>();
        }
        Integer pivot = arr.get(0);
        List<Integer> lesser = new ArrayList<Integer>();
        List<Integer> greater = new ArrayList<Integer>();
        for (Integer x : arr.subList(1, arr.size())) {
            if (x.compareTo(pivot) < 0) {
                lesser.add(x);
            } else {
                greater.add(x);
            }
        }
        List<Integer> result = new ArrayList<Integer>();
        result.addAll(quicksort(lesser));
        result.add(pivot);
        result.addAll(quicksort(greater));
        return result;
    }
}

2024-03-01 17:16:23,855 - QUICKSORT - INFO - 补丁2 2测试失败
2024-03-01 17:16:23,856 - QUICKSORT - INFO - 开始验证补丁2 3:
2024-03-01 17:16:23,856 - QUICKSORT - INFO - 
public class QUICKSORT {

    public static ArrayList<Integer> quicksort(ArrayList<Integer> arr) {
        if (arr.size() <= 1) {
            return arr;
        }
        Integer pivot = arr.get(0);
        ArrayList<Integer> lesser = new ArrayList<Integer>();
        ArrayList<Integer> greater = new ArrayList<Integer>();
        for (Integer x : arr.subList(1, arr.size())) {
            if (x < pivot) {
                lesser.add(x);
            } else {
                greater.add(x);
            }
        }
        ArrayList<Integer> lessSorted = quicksort(lesser);
        ArrayList<Integer> greatSorted = quicksort(greater);
        lessSorted.add(pivot);
        lessSorted.addAll(greatSorted);
        return lessSorted;
    }
}

2024-03-01 17:16:24,662 - QUICKSORT - INFO - 补丁2 3测试失败
2024-03-01 17:16:24,663 - QUICKSORT - INFO - 开始验证补丁2 4:
2024-03-01 17:16:24,663 - QUICKSORT - INFO - 
public class QUICKSORT {

    public static ArrayList<Integer> quicksort(ArrayList<Integer> arr) {
        if (arr.isEmpty()) {
            return new ArrayList<Integer>();
        }
        Integer pivot = arr.get(0);
        ArrayList<Integer> lesser = new ArrayList<Integer>();
        ArrayList<Integer> greater = new ArrayList<Integer>();
        for (Integer x : arr.subList(1, arr.size())) {
            if (x < pivot) {
                lesser.add(x);
            } else {
                greater.add(x);
            }
        }
        ArrayList<Integer> middle = new ArrayList<Integer>();
        middle.add(pivot);
        lesser = quicksort(lesser);
        greater = quicksort(greater);
        middle.addAll(greater);
        lesser.addAll(middle);
        return lesser;
    }
}

2024-03-01 17:16:25,464 - QUICKSORT - INFO - 补丁2 4测试失败
2024-03-01 17:16:25,465 - QUICKSORT - INFO - 开始验证补丁2 5:
2024-03-01 17:16:25,465 - QUICKSORT - INFO - 
public class QUICKSORT {

    public static ArrayList<Integer> quicksort(ArrayList<Integer> arr) {
        if (arr.isEmpty()) {
            return new ArrayList<Integer>();
        }
        Integer pivot = arr.remove(0);
        ArrayList<Integer> lesser = new ArrayList<Integer>();
        ArrayList<Integer> greater = new ArrayList<Integer>();
        for (Integer x : arr) {
            if (x.compareTo(pivot) < 0) {
                lesser.add(x);
            } else {
                greater.add(x);
            }
        }
        lesser = quicksort(lesser);
        greater = quicksort(greater);
        ArrayList<Integer> sorted = new ArrayList<Integer>();
        sorted.addAll(lesser);
        sorted.add(pivot);
        sorted.addAll(greater);
        return sorted;
    }
}

2024-03-01 17:16:26,318 - QUICKSORT - INFO - 补丁2 5测试失败
2024-03-01 17:16:26,320 - QUICKSORT - INFO - 开始验证补丁2 6:
2024-03-01 17:16:26,320 - QUICKSORT - INFO - 
public class QUICKSORT {

    public static ArrayList<Integer> quicksort(ArrayList<Integer> arr) {
        if (arr.isEmpty()) {
            return new ArrayList<Integer>();
        }
        Integer pivot = arr.get(0);
        ArrayList<Integer> lesser = new ArrayList<Integer>();
        ArrayList<Integer> greater = new ArrayList<Integer>();
        for (Integer x : arr.subList(1, arr.size())) {
            if (x < pivot) {
                lesser.add(x);
            } else {
                greater.add(x);
            }
        }
        lesser = quicksort(lesser);
        greater = quicksort(greater);
        lesser.add(pivot);
        lesser.addAll(greater);
        return lesser;
    }
}

2024-03-01 17:16:27,172 - QUICKSORT - INFO - 补丁2 6测试失败
2024-03-01 17:16:27,173 - QUICKSORT - INFO - 开始验证补丁2 7:
2024-03-01 17:16:27,173 - QUICKSORT - INFO - 
public class QUICKSORT {

    public static ArrayList<Integer> quicksort(ArrayList<Integer> arr) {
        if (arr.isEmpty()) {
            return new ArrayList<Integer>();
        }
        Integer pivot = arr.get(0);
        ArrayList<Integer> lesser = new ArrayList<Integer>();
        ArrayList<Integer> greater = new ArrayList<Integer>();
        for (Integer x : arr.subList(1, arr.size())) {
            if (x < pivot) {
                lesser.add(x);
            } else {
                greater.add(x);
            }
        }
        ArrayList<Integer> middle = new ArrayList<Integer>();
        middle.add(pivot);
        lesser = quicksort(lesser);
        greater = quicksort(greater);
        middle.addAll(greater);
        lesser.addAll(middle);
        return lesser;
    }
}

2024-03-01 17:16:27,173 - QUICKSORT - INFO - 补丁2 7为重复的补丁
2024-03-01 17:16:27,178 - QUICKSORT - INFO - 开始验证补丁2 8:
2024-03-01 17:16:27,178 - QUICKSORT - INFO - 
lesser = quicksort(lesser);
greater = quicksort(greater);
ArrayList<Integer> result = new ArrayList<Integer>();
result.addAll(lesser); // Add all the lesser elements
result.add(pivot); // Add the pivot
result.addAll(greater); // Add all the greater elements
return result;

2024-03-01 17:16:27,974 - QUICKSORT - INFO - 补丁2 8测试失败
2024-03-01 17:16:27,975 - QUICKSORT - INFO - 开始验证补丁2 9:
2024-03-01 17:16:27,975 - QUICKSORT - INFO - 
public static void quicksort(ArrayList<Integer> arr, int begin, int end) {
    if (begin < end) {
        int partitionIndex = partition(arr, begin, end);

        quicksort(arr, begin, partitionIndex - 1);
        quicksort(arr, partitionIndex + 1, end);
    }
}

private static int partition(ArrayList<Integer> arr, int begin, int end) {
    Integer pivot = arr.get(end);
    int i = (begin - 1);

    for (int j = begin; j < end; j++) {
        if (arr.get(j) <= pivot) {
            i++;

            Integer swapTemp = arr.get(i);
            arr.set(i, arr.get(j));
            arr.set(j, swapTemp);
        }
    }

    Integer swapTemp = arr.get(i + 1);
    arr.set(i + 1, arr.get(end));
    arr.set(end, swapTemp);

    return i + 1;
}

2024-03-01 17:16:29,148 - QUICKSORT - INFO - 补丁2 9 通过了所有的测试用例
2024-03-01 17:32:18,469 - QUICKSORT - INFO - 开始验证补丁1 1:
2024-03-01 17:32:18,469 - QUICKSORT - INFO - 
            } else {
                greater.add(x);
            }
            
2024-03-01 17:32:19,593 - QUICKSORT - INFO - 补丁1 1 通过了所有的测试用例
